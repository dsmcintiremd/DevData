rbind(ci1,ci2,ci3,ci4)
ci1 <- c(rownames(lm3_coef)[1], lm3_coef[1,1] + c(-1, 1) * qt(.975, df = lm_3$df) * lm3_coef[1, 2])
ci2 <- c(rownames(lm3_coef)[2], lm3_coef[2,1] + c(-1, 1) * qt(.975, df = lm_3$df) * lm3_coef[2, 2])
ci3 <- c(rownames(lm3_coef)[3], lm3_coef[3,1] + c(-1, 1) * qt(.975, df = lm_3$df) * lm3_coef[3, 2])
ci4 <- c(rownames(lm3_coef)[4], lm3_coef[4,1] + c(-1, 1) * qt(.975, df = lm_3$df) * lm3_coef[4, 2])
rbind(ci1,ci2,ci3,ci4)
round(sort(hatvalues(lm_3),decreasing = TRUE)[1:8],3)
lm (mpg ~ factor(cyl) + wt, data=mtcars)
lm (mpg ~ factor(cyl) + wt, data=mtcars) ## adjusted, holding weight constant
lm (mpg ~ factor(cyl), data=mtcars) ## unadjusted
lm(mpg ~ I(wt * 0.5) + factor(cyl), data=mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit5 <- lm(y~x)
hatvalues(fit5)
fit6 <- lm(y~x)
hatvalues(fit6)
dfbetas(fit6)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data=mtcars)
lm(mpg ~ wt + factor(cyl), data=mtcars)
lm(mpg ~ factor(cyl), data=mtcars)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data=mtcars)
lm(mpg ~ I(wt * 0.5) , data=mtcars)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data=mtcars)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data=mtcars)
lm(formula = mpg ~ as.factor(carb), data = mtcars)
summary(lm(formula = mpg ~ as.factor(carb), data = mtcars))
summary(lm(formula = mpg ~ as.factor(carb) + wt, data = mtcars))
library(swirl)
dave
swirl
swirl()
var(rpois(1000,50))
nxt()
View(hits)
class(hits[,'date'])
class(hits[,'date'])
as.integer(head(hits[,'date'])
)
mdl <- glm(visits ~ date, family=poisson, data=hits)
summary(mdl)
confint(mdl, 'date')
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm (visits ~ julian(gaData$date), offset(visits+1), data=hits)
mdl2 <- glm (visits ~ julian(gaData$date), offset(visits+1), family=poisson, data=hits)
mdl2 <- glm (visits ~ date, offset(visits+1), family=poisson, data=hits)
mdl2 <- glm (simplystats ~ date, family=poisson, data=hits, offset=log(visits+1))
qpois(.95,
| mdl2$fitted.values[704])
qpois(.95,mdl2$fitted.values[704])
library(swirl)
swirl
swirl()
View(ravenData)
mdl <- glm ( ravenWinNum ~ ravenScore, family=poisson, data=ravenData)
mdl <- glm ( ravenWinNum ~ ravenScore, family=binomial, data=ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
lodds
summary(mdl)
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
mdl0 <- glm(ravenWinNum ~ 1, binomial, ravenData)
summary(md10)
summary(md10)
summary(md10)
mdl0 <- glm(ravenWinNum ~ 1, binomial, ravenData)
mdl0
summary(mdl0)
library(MASS)
library (dplyr)
shuttle = mutate (shuttle, autobin = 1*(use=="auto"), headbin = 1*(wind=="head") )
logFit1 <- glm (autobin ~ headbin ,family="binomial", data=shuttle)
summary(logFit1)
exp(logFit1$coefficients)
logFit2 <- glm (autobin ~ headbin + magn ,family="binomial", data=shuttle)
summary(logFit2)
exp(logFit2$coefficients)
sprayB <- relevel(InsectSprays$spray, "B")
logFit4 <- glm (count ~ sprayB, family=poisson, data=InsectSprays)
summary(logFit4)
exp(logFit4$coefficients)
install.packages("carat")
install.packages("caret")
library(caret)
?dummyVars?
)
?dummyVars
??dummyVars
library(caret)
dummyVars
nearZeroVar
?nearZeroVar
?dummyVars
?createDataPartition
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
View(adData)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
View(trainIndex)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
View(training)
View(trainIndex)
View(testing)
View(trainIndex)
View(adData)
trainIndex = createDataPartition(diagnosis, p = 0.50)
str(trainIndex)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
str(trainIndex)
head(trainInde)
head(trainInde)
head(trainIndex)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
head(inTrain)
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer)
?hist
training$SuperPlasticizer
training
str(training)
training$Superplasticizer
hist(training$Superplasticizer)
summary(training$Superplasticizer)
log(0)
log19
log10
log(training$Superplasticizer)
log10(training$Superplasticizer)
log10(training$Superplasticizer+1)
hist(log(training$Superplasticizer+1))
hist(log10(training$Superplasticizer+1))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(testing)
set.seed(1000)
inTrain2 = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain2 = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training2 = mixtures[ inTrain2,]
testing2 = mixtures[-inTrain2,]
View(training2)
hist(training2$Superplasticizer)
table(training2$Superplasticizer)
summary(training2)
training2$Superplasticizer <- log10(training2$Superplasticizer+1)
hist(training2$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData3 = data.frame(diagnosis,predictors)
inTrain3 = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
inTrain3 = createDataPartition(adData3$diagnosis, p = 3/4)[[1]]
training3 = adData3[ inTrain3,]
testing3 = adData3[-inTrain3,]
View(training2)
View(training3)
str(training3)
colnames
colnames(training3)
colnames(training3)
cn3 <- colnames(training3)
grepl(cn3)
?grepl
grepl("IL_",cn3)
grepl("IL_",colnames(training3))
grep("IL_",colnames(training3))
grep("\IL_",colnames(training3))
grep("IL_",colnames(training3))
grep(^"IL_",colnames(training3))
grep("IL_",colnames(training3))
grep("^IL_",colnames(training3))
grepl("^IL_",colnames(training3))
grep("^IL_",colnames(training3))
cn3 <- colnames(training3)[grep("^IL_",colnames(training3))]
cn3
train3sub <- training3[ , cn3]
train3sub
str(train3sub)
View(train3sub)
View(AlzheimerDisease)
data(AlzheimerDisease)
View(AlzheimerDisease)
data(AlzheimerDisease)
View(AlzheimerDisease)
unique(training3$diagnosis)
preProcess3 <- PreProcess (train3sub, method="PCA")
library(caret)
preProcess3 <- PreProcess (train3sub, method="PCA")
preProcess3 <- preProcess (train3sub, method="PCA")
preProcess3 <- preProcess (train3sub, method="pca")
preProcess3
preProcess3 <- preProcess (train3sub, thresh = 0.95, method="pca")
preProcess3
preProcess3 <- preProcess (train3sub, thresh = 0.80, method="pca")
preProcess3
set.seed(3433)
data(AlzheimerDisease)
adData4 = data.frame(diagnosis,predictors)
inTrain4 = createDataPartition(adData4$diagnosis, p = 3/4)[[1]]
training4 = adData4[ inTrain4,]
testing4 = adData4[-inTrain4,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData4 = data.frame(diagnosis,predictors)
inTrain4 = createDataPartition(adData4$diagnosis, p = 3/4)[[1]]
training4 = adData4[ inTrain4,]
testing4 = adData4[-inTrain4,]
cn4 <- colnames(training4)[grep("^IL_",colnames(training4))]
train4sub <- training4[ , c("diagnosis", cn4]
train4sub <- training4[ , c("diagnosis", cn4)]
View(training4)
View(train4sub)
train4sub
train4sub[,-1]
z <- train4sub[,-1]
str(x)
str(z)
str(train4sub)
preProcess4 <- preProcess (train4sub[,-1], thresh = 0.80, method="pca")
preProcess4
str(preProcess4)
summary(preProcess4)
dim(preProcess4)
trainPC4    <- predict (preProcess4, train4sub[,-1])
View(trainPC4)
ModelFit4p  <- train(train4sub$diagnosis ~ ., method="glm", data=trainPC4)
preProcess4 <- preProcess (train4sub[,-1], thresh = 0.80, method="pca")
trainPC4    <- predict (preProcess4, train4sub[,-1])
ModelFit4p  <- train(train4sub$diagnosis ~ ., method="glm", data=trainPC4)
test4sub  <- testing4 [ , c("diagnosis", cn4)]
View(test4sub)
testPC4     <- predict (prePocess4, test4sub[,-1])
testPC4     <- predict (preProcess4, test4sub[,-1])
confusionMatrix (test4sub$diagnosis, predict(ModelFit4p, testPC4))
ModelFit4p  <- train(train4sub$diagnosis ~ ., method="glm", data=trainPC4)
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
library(caret)
preProcess4 <- preProcess (train4sub[,-1], thresh = 0.80, method="pca")
trainPC4    <- predict (preProcess4, train4sub[,-1])
ModelFit4p  <- train(train4sub$diagnosis ~ ., method="glm", data=trainPC4)
testPC4     <- predict (preProcess4, test4sub[,-1])
confusionMatrix (test4sub$diagnosis, predict(ModelFit4p, testPC4))
ModelFit4a <- train(train4sub$diagnosis ~ ., method="glm", preProcess="pca", data=train4sub)
ModelFit4a
confusionMatrix (test4sub$diagnosis, predict(ModelFit4a,test4sub))
ModelFit4a <- train(train4sub$diagnosis ~ ., method="glm", preProcess="pca", data=train4sub)
confusionMatrix (test4sub$diagnosis, predict(ModelFit4a,test4sub))
ModelFit4a <- train(train4sub$diagnosis ~ ., method="glm",   data=train4sub)
confusionMatrix (test4sub$diagnosis, predict(ModelFit4a,test4sub))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain2 = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training2 = mixtures[ inTrain2,]
testing2 = mixtures[-inTrain2,]
hist(training2$Superplasticizer)
table(training2$Superplasticizer)
summary(training2)
training2$Superplasticizer <- log10(training2$Superplasticizer+1)
str(concrete)
concrete$Superplasticizer
min(concrete$Superplasticizer)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain2 = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training2 = mixtures[ inTrain2,]
testing2 = mixtures[-inTrain2,]
hist(training2$Superplasticizer)
table(training2$Superplasticizer)
summary(training2)
training2$Superplasticizer <- log10(training2$Superplasticizer+1)
## Question 3
library(caret)
library(AppliedPredictiveModeling)
library(caret)
set.seed(3433)
data(AlzheimerDisease)
adData3 = data.frame(diagnosis,predictors)
inTrain3 = createDataPartition(adData3$diagnosis, p = 3/4)[[1]]
training3 = adData3[ inTrain3,]
testing3 = adData3[-inTrain3,]
str(training3)
cn3 <- colnames(training3)[grep("^IL_",colnames(training3))]
train3sub <- training3[ , cn3]
preProcess3 <- preProcess (train3sub, thresh = 0.80, method="pca")
preProcess3
## Question 4
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData4 = data.frame(diagnosis,predictors)
inTrain4 = createDataPartition(adData4$diagnosis, p = 3/4)[[1]]
training4 = adData4[ inTrain4,]
testing4 = adData4[-inTrain4,]
cn4 <- colnames(training4)[grep("^IL_",colnames(training4))]
## -- trainig and testing sets
train4sub <- training4[ , c("diagnosis", cn4)]
test4sub  <- testing4 [ , c("diagnosis", cn4)]
#-- Processing with PCA
preProcess4 <- preProcess (train4sub[,-1], thresh = 0.80, method="pca")
trainPC4    <- predict (preProcess4, train4sub[,-1])
ModelFit4p  <- train(train4sub$diagnosis ~ ., method="glm", data=trainPC4)
testPC4     <- predict (preProcess4, test4sub[,-1])
confusionMatrix (test4sub$diagnosis, predict(ModelFit4p, testPC4))
#-- Alternative (sets number PCs)
ModelFit4a <- train(train4sub$diagnosis ~ ., method="glm",   data=train4sub)
confusionMatrix (test4sub$diagnosis, predict(ModelFit4a,test4sub))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
indexTrain1 = createDataPartition(y=segmentationOriginal$Case, p=0.70, list=FALSE)
View(indexTrain1)
segTrain1 = segmentationOriginal[ indexTrain1,]
segTest1  = segmentationOriginal[-indexTrain1,]
set.seed(125)
modFit1 <- train (Case ~ ., method="rpart", data=segTrain1)
summary(modFit1)
print(modFit1$finalModel)
plot(modFit1$finalModel, uniform=TRUE,main="Classification Tree")
text(modFit1$finalModel, use.n=TRUE, all=TRUE, cex=.8)
install.packages("rattle")
unique(segmentationOriginal$Class)
library(rattle)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rattle)
indexTrain1 = createDataPartition(y=segmentationOriginal$Case, p=0.70, list=FALSE)
segTrain1 = segmentationOriginal[ indexTrain1,]
segTest1  = segmentationOriginal[-indexTrain1,]
set.seed(125)
modFit1 <- train (Case ~ ., method="rpart", data=segTrain1)
print(modFit1$finalModel)
fancyRpartPlot(modFit1$finalModel)
predict(modFit1, newdata = segTest1)
View(segTest1)
print(modFit1$finalModel)
str(segmentationOriginal)
tail(str(segmentationOriginal))
str(segTrain1)
modFit1 <- train (Class ~ ., method="rpart", data=segTrain1)
print(modFit1$finalModel)
plot(modFit1$finalModel, uniform=TRUE,main="Classification Tree")
text(modFit1$finalModel, use.n=TRUE, all=TRUE, cex=.8)
fancyRpartPlot(modFit1$finalModel)
library(rpart)
fancyRpartPlot(modFit1$finalModel)
fancyRpartPlot(modFit1$finalModel)
fancyRpartPlot(modFit1$finalModel)
?fancyRpartPlot
windows()
plot(modFit1$finalModel, uniform=TRUE,main="Classification Tree")
text(modFit1$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
data(olive)
olive = olive[,-1]
View(olive)
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
mean(olive$Palmitic)
modFit3 <- train (Area ~ ., method="rpart", data=olive)
predict(modFit3,newdata)
table(olive$Area)
tree
install.packages("tree")
tree
library(tree)
tree
modFit3 <- tree(Area ~ ., data=olive)
predict(modFit3,newdata)
remove(modFit3)
predict(modFit3,newdata)
modFit3 <- tree(Area ~ ., data=olive)
predict(modFit3,newdata)
modFit3 <- train (Area ~ ., method="party", data=olive)
modFit3 <- train (Area ~ ., method="rpart", data=olive)
install.packages("party")
library(party)
?party
??party
library(party)
library(ElemStatLearn)
data(SAheart)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train4 = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA4 = SAheart[train4,]
testSA4 = SAheart[-train4,]
View(testSA4)
names(getModelInfo())
getModelInfo()
names(getModelInfo())
modFit4 <- train (chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial" data=trainSA4)
modFit4 <- train (chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data=trainSA4)
summary(modFit4)
summary(modFit4)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(2,3)
trainSA4
missClass(trainSA4,predict(modFit4,trainSA4))
str(trainSA4)
str(predict(modFit4,trainSA4))
trainSA4$chd
missClass(trainSA4$chd,predict(modFit4,trainSA4))
missClass(testSA4$chd,predict(modFit4,testSA4))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
data(vowel.train)
data(vowel.test)
View(vowel.test)
View(vowel.train)
remove(vowel.test)
data("vowel.test")
modFit5 <- train (y ~ . , method="rf", data=vowel.train, prox=TRUE)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
View(vowel.train)
View(vowel.test)
modFit5 <- train (y ~ . , method="rf", data=vowel.train, prox=TRUE)
modFit5
?varImp
varImp(modFit5, scale = FALSE)
indexTrain1 = createDataPartition(y=segmentationOriginal$Case, p=0.70, list=FALSE)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rattle)
library(rpart)
indexTrain1 = createDataPartition(y=segmentationOriginal$Case, p=0.70, list=FALSE)
segTrain1 = segmentationOriginal[ indexTrain1,]
segTest1  = segmentationOriginal[-indexTrain1,]
set.seed(125)
modFit1 <- train (Class ~ ., method="rpart", data=segTrain1)
print(modFit1$finalModel)
library(caret)
library(randomForest)
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",temp)
training <- read.csv(temp)
unlink(temp)
sapply(training, function(x) sum(is.na(x))/nrow(training))
training <- training[,sapply(training, function(x) sum(is.na(x))/nrow(training))==0]
training <- training[,-c(1:7)]
dim(training)
str(training)
training <- training[,sapply(training, function(x) sum(x=="")/nrow(training))==0]
dim(training)
training <- training[,sapply(training, function(x) sum(x=="")/nrow(training))==0]
trainindex <- createDataPartition(training$classe, p = 0.75, list = FALSE)
trainset <- training[trainindex, ]
testset <- training[-trainindex, ]
rfmodel <- randomForest(classe~.,data=trainset, method="class")
?randomForest
unlink(temp)
install.packages("shiny")
library(shiny)
install.packages("slidify")
setwd("~/Dave/Coursera/DataScientistsToolKit/DevData")
setwd("~/Dave/Coursera/DataScientistsToolKit/DevData")
library(dplyr)
DCAreaFlights2008 <- read.csv("data/DC2008.csv", header = TRUE)
setwd("~/Dave/Coursera/DataScientistsToolKit/DevData")
AirportNames <- read.csv("data/airports.csv", header=TRUE)
DCAreaFlights2008 <- read.csv("data/DC2008.zip", header = TRUE)
DCAreaFlights2008 <- read.csv("data/DC2008.zip", header = TRUE)
DCAreaFlights2008 <- read.csv("data/DC2008.csv", header = TRUE)
shiny::runApp()
shiny::runApp()
